{"version":3,"sources":["components/form.js","components/modal.js","components/wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["Forms","isFirstSection","handleNext","onSubmit","isTimerVisible","timer","useForm","register","handleSubmit","errors","formState","Card","className","CardBody","FormGroup","Label","for","Input","type","name","id","placeholder","required","minLength","maxLength","pattern","Button","color","onClick","nickname","cardNo","ModalElement","isOpen","Modal","ModalBody","Wrapper","children","Container","initialValues","App","useState","setIsOpen","setIsFirstSection","remainingSec","setRemainingSec","setIsTimerVisible","timerID","setTimerId","useEffect","toggleSection","document","querySelector","reset","clearInterval","useIdleTimer","timeout","onIdle","setInterval","startTimer","onActive","debounce","reloadPage","timing","setTimeout","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6eec5be6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormGroup, Label, Input, Button, Card, CardBody } from 'reactstrap';\n\nconst Forms = ({\n  isFirstSection,\n  handleNext,\n  onSubmit,\n  isTimerVisible,\n  timer,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Card className=\"w-50\">\n      <CardBody>\n        <form className=\"register_form\" onSubmit={handleSubmit(onSubmit)}>\n          <span className={isFirstSection ? 'visible' : 'hidden'}>\n            <FormGroup>\n              <Label for=\"nickname\">Type your nickname</Label>\n              <Input\n                type=\"text\"\n                name=\"nickname\"\n                id=\"nickname\"\n                placeholder=\"nickname\"\n                {...register('nickname', {\n                  required: true,\n                  minLength: 3,\n                  maxLength: 20,\n                  pattern: /[A-Za-z0-9_-]+/,\n                })}\n              />\n            </FormGroup>\n            <Button color=\"primary\" type=\"button\" onClick={handleNext}>\n              Next\n            </Button>\n            <span className=\"timer\">{isTimerVisible && timer}</span>\n          </span>\n          <span className={!isFirstSection ? 'visible' : 'hidden'}>\n            <FormGroup>\n              <Label for=\"cardNo\">Your card's number</Label>\n              <Input\n                type=\"number\"\n                name=\"card\"\n                id=\"cardNo\"\n                placeholder=\"card number\"\n                {...register('cardNo', {\n                  required: true,\n                  minLength: 10,\n                  maxLength: 10,\n                })}\n              />\n            </FormGroup>\n            <Button color=\"primary\" type=\"submit\">\n              Finish\n            </Button>\n            <span className=\"timer\">{isTimerVisible && timer}</span>\n          </span>\n        </form>\n        {(errors.nickname?.type === 'minLength' ||\n          errors.nickname?.type === 'maxLength' ||\n          errors.nickname?.type === 'pattern') &&\n          'Nickname has min 3 and max 20 characters, only letters, digits, underscore or dash'}\n        {errors.nickname?.type === 'required' && 'Nickname is required'}\n        {errors.cardNo?.type === 'required' && 'Card is required'}\n        {(errors.cardNo?.type === 'minLength' ||\n          errors.cardNo?.type === 'maxLength') &&\n          'Card number should have 10 digits'}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default Forms;\n","import { Modal, ModalBody } from 'reactstrap';\n\nconst ModalElement = ({ isOpen }) => {\n  return (\n    <>\n      <Modal isOpen={isOpen}>\n        <ModalBody>\n          <p>You have registered succssesfully!</p>\n        </ModalBody>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalElement;\n","import React from 'react';\nimport { Container } from 'reactstrap';\n\nconst Wrapper = ({ children }) => {\n  return (\n    <Container className=\"container-fluid vh-100 d-flex justify-content-center align-items-center\">\n      {children}\n    </Container>\n  );\n};\n\nexport default Wrapper;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './assets/scss/blk-design-system-react.scss';\nimport Forms from './components/form';\nimport ModalElement from './components/modal';\nimport Wrapper from './components/wrapper';\nimport { useIdleTimer } from 'react-idle-timer';\n\nconst initialValues = {\n  idleSecAllowed: 20,\n  idleDelaySec: 2000,\n};\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFirstSection, setIsFirstSection] = useState(true);\n  const [remainingSec, setRemainingSec] = useState(\n    initialValues.idleSecAllowed\n  );\n  const [isTimerVisible, setIsTimerVisible] = useState(false);\n  const [timerID, setTimerId] = useState();\n\n  useEffect(() => {\n    if (remainingSec === 0) {\n      !isFirstSection && toggleSection();\n      document.querySelector('.register_form').reset();\n      setIsTimerVisible(false);\n      clearInterval(timerID);\n      setRemainingSec(initialValues.idleSecAllowed);\n      reset();\n    }\n  }, [remainingSec]);\n\n  const startTimer = () => {\n    let id = setInterval(() => {\n      setRemainingSec((remainingSec) => remainingSec - 1);\n    }, 1000);\n    setTimerId(id);\n  };\n\n  const handleOnIdle = () => {\n    setIsTimerVisible(true);\n    startTimer();\n  };\n\n  const handleOnActive = () => {\n    setIsTimerVisible(false);\n    clearInterval(timerID);\n    setRemainingSec(initialValues.idleSecAllowed);\n  };\n\n  const { reset } = useIdleTimer({\n    timeout: initialValues.idleDelaySec,\n    onIdle: handleOnIdle,\n    onActive: handleOnActive,\n    debounce: 500,\n  });\n\n  const onSubmit = () => {\n    setIsOpen(true);\n    reloadPage(3000);\n  };\n\n  const toggleSection = () => {\n    setIsFirstSection(!isFirstSection);\n  };\n\n  const reloadPage = (timing) => {\n    setTimeout(() => window.location.reload(), timing);\n  };\n\n  return (\n    <>\n      <ModalElement isOpen={isOpen}></ModalElement>\n      <Wrapper>\n        <Forms\n          isFirstSection={isFirstSection}\n          handleNext={toggleSection}\n          onSubmit={onSubmit}\n          isTimerVisible={isTimerVisible}\n          timer={remainingSec}\n        ></Forms>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}